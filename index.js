
const d = require("simple-json-db")
const db = new d('./t.json');
const fs = require("fs")
const client = require('nekos.life');
const neko = new client();
let downloadImage = require('download-image')
if(!fs.existsSync("./link.ender.txt")){
  fs.writeFileSync("./link.ender.txt","")
}
async function test() {
  let content= fs . readFileSync("./link.ender.txt")
var temp=  await neko.sfw.waifu()
console.log({add:temp["url"]})
await fs.writeFileSync("./link.ender.txt",temp["url"]+"\n"+fs.readFileSync("./link.ender.txt"))
  return(temp);
}
async function rebuild(json){
  
  let string   =JSON.stringify(json)
  console.log(string)
  let parsed = JSON.parse(json)
  console.log(parsed)
  
}

test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()

test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
